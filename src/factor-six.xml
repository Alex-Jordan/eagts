<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                            -->
<!--                                                          -->
<!--    Explorations in Algebraic Graph Theory with Sage      -->
<!--                                                          -->
<!-- Copyright (C) 2010-2013  Robert A. Beezer, Chris Godsil  -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="chapter-factor-six">
    <title>One-Factors of <m>K_6</m></title>
    <author>
        <personname>Robert A. Beezer</personname>
    </author>

    <p>In this chapter, we begin with the complete graph on six vertices, \(K_6\) and construct three diverse and remarkable combinatorial structures.  This material follows Chapter 6, <q>A property of the number six</q> of <q>Designs, Graphs, Codes and their Links</q> by P.J. Cameron and J.H. van Lint, who in turn credit lectures of G. Higman.  We begin with the vertices and edges of the complete graph, and then create sets of three edges known as \(1\)-factors.  Collections of \(1\)-factors become factorizations of the original complete graph.  Vertices, edges, factors and factorizations then all combine to create our three ultimate combinatorial structures.</p>

    <section>
        <title>Factors of <m>K_6</m></title>

        <p>A <term>1-factor</term>, is a subgraph which includes every vertex and is regular of degree \(1\).  (Here we will use <term>factor</term> as an abbreviation for 1-factor; in some contexts people use the term factor to denote a spanning regular graph.)
For \(K_6\) a 1-factor is a collection of \(3\) edges with no common vertices.</p>

        <p>We build \(K_6\) first.  We will work with sets of sets, so we convert the edges of \(K_6\) into two-element sets.  Note that the vertices are integers, <em>starting with zero</em>.  Also, we use the Sage constructor <c>Set()</c> rather than the Python version (<c>set()</c>), since these behave differently and we will have an easier time with the Sage version.  Of course, \(K_6\) has \(6\) vertices and \({6\choose 2}=15\) edges.  We will see these numbers repeatedly throughout this chapter.</p>

        <sage>
            <input>
            K6 = graphs.CompleteGraph(6)
            vertices = K6.vertices()
            vertices
            </input>
            <output>[0, 1, 2, 3, 4, 5]</output>
        </sage>

        <sage>
            <input>
            edges = [Set(e) for e in K6.edges(labels=False)]
            edges
            </input>
            <output>
            [{0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5},
            {1, 2}, {1, 3}, {1, 4}, {1, 5}, {2, 3},
            {2, 4}, {2, 5}, {3, 4}, {3, 5}, {4, 5}]
            </output>
        </sage>

        <p>We will give each of the \(15\) edges a name (an arbitrary lowercase letter) which will make some of our graphs a bit more tidy when displaying them. A Python dictionary (mapping) is a natural way to specify this.</p>

        <sage>
            <input>
            edge_names = dict(zip(edges, [chr(i) for i in range(ord('a'), ord('a')+15)]))
            edge_names  # not tested
            </input>
        </sage>
        <p>Since \(K_6\) includes every possible edge, a factor is partition of the vertex set into a set of three \(2\)-sets.  We discover \(15\) factors.</p>

        <sage>
            <input>
            factors = SetPartitions(vertices,[2,2,2]).list()
            factors = [Set(list(A)) for A in factors]
            factors
            </input>
            <output>
            [{{0, 1}, {2, 3}, {4, 5}},
             {{2, 4}, {3, 5}, {0, 1}},
             {{3, 4}, {2, 5}, {0, 1}},
             {{1, 3}, {0, 2}, {4, 5}},
             {{0, 2}, {1, 4}, {3, 5}},
             {{3, 4}, {1, 5}, {0, 2}},
             {{1, 2}, {0, 3}, {4, 5}},
             {{1, 4}, {0, 3}, {2, 5}},
             {{2, 4}, {1, 5}, {0, 3}},
             {{1, 2}, {0, 4}, {3, 5}},
             {{1, 3}, {0, 4}, {2, 5}},
             {{0, 4}, {2, 3}, {1, 5}},
             {{1, 2}, {0, 5}, {3, 4}},
             {{1, 3}, {2, 4}, {0, 5}},
             {{0, 5}, {2, 3}, {1, 4}}]
            </output>
        </sage>

        <sage>
            <input>len(factors)</input>
            <output>15</output>
        </sage>

        <p>We can easily visualize the \(15\) different factors by considering each factor as an edge-induced subgraph of \(K_6\).  We build a list of these subgraphs and use a convenient utility in Sage to display them all simply and compactly.  These \(15\) objects will be critical in what follows.</p>

        <sage>
            <input>
            factor_graphs = [Graph([e.list() for e in f]) for f in factors]
            graphs_list.show_graphs(factor_graphs)
            </input>
        </sage>

        <figure>
            <image source="images/K6-fifteen-one-factors.png"/>
            <caption>Fifteen one-factors of <m>K_6</m></caption>
        </figure>

        <p>The edge-factor incidence graph is a remarkable graph.  The Tutte \(8\)-cage is the cubic graph (<ie /> regular of degree \(3\)) with girth \(8\) and having the fewest possible number of vertices.  It therefore also qualifies as a Moore graph.  Since it is distance-transitive, it is also distance-regular.</p>

        <p>We use the set of edges and the set of factors as the vertex set of a graph.  We join an edge to a factor if the edge is a component of the factor.</p>

        <sage>
            <input>
            T = Graph([(e, f) for e in edges for f in factors if e in f])
            T.num_verts(), T.num_edges(), T.is_bipartite(), T.is_regular(), T.average_degree(), T.girth()
            </input>
            <output>(30, 45, True, True, 3, 8)</output>
        </sage>

        <sage>
            <input>T.is_isomorphic(graphs.TutteCoxeterGraph())</input>
            <output>True</output>
        </sage>

        <p>Since this graph is built into Sage, we can get a much more pleasing drawing from the embedding that is hard-coded.  If we give our factors names (uppercase letters from the start of the alphabet), then we can relabel the vertices of a copy of the graph and use Sage's <c>BipartiteGraph</c> class to get another informative drawing.</p>

        <sage>
            <input>graphs.TutteCoxeterGraph().plot()</input>
        </sage>

        <sage>
            <input>
            factor_names = dict(zip(factors, [chr(i) for i in range(ord('A'), ord('a')+15)]))
            factor_names  # not tested
            </input>
        </sage>

        <sage>
            <input>
            TB = copy(T)
            TB.relabel(edge_names)
            TB.relabel(factor_names)
            BipartiteGraph(TB).plot()
            </input>
        </sage>
    </section>

    <section>
        <title>Factorizations of <m>K_6</m></title>

        <p>A <term>factorization</term>, or more precisely a <term>\(1\)-factorization</term>, is a partition of the edge set of a graph into \(1\)-factors.  For \(K_6\) this is a partition of the \({6\choose 2}=15\) edges into \(5\) factors with \(3\) edges each.</p>

        <p>We will see that \(K_6\) has six distinct factorizations, each isomorphic to the other.  Furthermore, each factor is contained in exactly two of these factorizations, and any pair of factorizations have exactly one factor in common.  So given a factor we can determine a pair of factorizations and given a pair of factorizations we can determine a factor.  These observations will be critical in the following, especially the section on duality.  These claims can be verified analytically <mdash /> we will instead use Sage experimentally.</p>

        <p>We begin by employing a graph to help us find the factorizations.  The vertices of the graph are the factors of \(K_6\), and we join two vertices if the factors are disjoint.  Then a factorization of \(K_6\) is a clique of size \(5\) in this graph, and there is no possibility of any larger clique because the edge set is exhausted by \(5\) disjoint factors.  So factorizations of \(K_6\) are maximal cliques in this graph, which we record as Sage sets.</p>

        <sage>
            <input>
            factor_graph = Graph([(f1, f2) for f1, f2 in Subsets(factors, 2) if f1.intersection(f2).cardinality() == 0])
            factorizations = factor_graph.cliques_maximum()
            factorizations = [Set(f) for f in factorizations]
            factorizations
            </input>
            <output>
            [{{{2, 4}, {1, 5}, {0, 3}}, {{0, 1}, {2, 3}, {4, 5}}, {{0, 2}, {1, 4}, {3, 5}},
             {{1, 3}, {0, 4}, {2, 5}}, {{1, 2}, {0, 5}, {3, 4}}},
             {{{1, 2}, {0, 3}, {4, 5}}, {{0, 2}, {1, 4}, {3, 5}}, {{1, 3}, {2, 4}, {0, 5}},
             {{0, 4}, {2, 3}, {1, 5}}, {{3, 4}, {2, 5}, {0, 1}}},
             {{{1, 4}, {0, 3}, {2, 5}}, {{2, 4}, {3, 5}, {0, 1}}, {{1, 3}, {0, 2}, {4, 5}},
             {{0, 4}, {2, 3}, {1, 5}}, {{1, 2}, {0, 5}, {3, 4}}},
             {{{1, 4}, {0, 3}, {2, 5}}, {{0, 1}, {2, 3}, {4, 5}}, {{3, 4}, {1, 5}, {0, 2}},
             {{1, 3}, {2, 4}, {0, 5}}, {{1, 2}, {0, 4}, {3, 5}}},
             {{{0, 5}, {2, 3}, {1, 4}}, {{2, 4}, {3, 5}, {0, 1}}, {{1, 3}, {0, 4}, {2, 5}},
             {{3, 4}, {1, 5}, {0, 2}}, {{1, 2}, {0, 3}, {4, 5}}},
             {{{2, 4}, {1, 5}, {0, 3}}, {{3, 4}, {2, 5}, {0, 1}}, {{1, 3}, {0, 2}, {4, 5}},
             {{1, 2}, {0, 4}, {3, 5}}, {{0, 5}, {2, 3}, {1, 4}}}]
            </output>
        </sage>

        <p>To visualize factorizations, it helps to look at a drawing of \(K_6\) with edges colored according to the factor they belong to.  We build an ad-hoc set of fifteen contrasting colors as RGB triples and assign them to the factors with a Python dictionary.  We will consistently use this color assignment in the remainder.</p>

        <sage>
            <input>
            twentyseven_colors = [triple for triple in CartesianProduct([0,0.5, 1], [0,0.5, 1], [0,0.5, 1])]
            contrast_colors = [tuple(twentyseven_colors[i]) for i in [0,1,3,5,7,8,9,11,13,18,19,21,22,23,24]]
            factor_colors = dict(zip(factors, contrast_colors))
            </input>
        </sage>

        <p>We now build and draw a copy of \(K_6\) for each factorization, using the provided color for the edges of each factor in the factorization.  We will employ the <c>one_K6_graphic()</c> function twice, so be sure to execute it first.  We exercise some of the graphics primitives for a little more control over the design of our diagrams.</p>

        <sage>
            <input>
            def one_K6_graphic(center, factorization):
                r'''Draw a single factorization of K6 at a center point'''
                global factor_colors
                radius = 300
                v_radius = 20
                points = [(center[0]+radius*cos(i*pi/3.0), center[1]+radius*sin(i*pi/3.0)) for i in range(6)]
                vertices = [circle(p, v_radius, fill=True, facecolor='black', edgecolor='black', zorder=4) for p in points]
                edges = [line([points[e[0]], points[e[1]]], color=factor_colors[f], thickness=3, zorder=3) for f in factorization for e in f]
                mask = polygon2d(points, fill=True, rgbcolor=(1,1,1), zorder=2) # for combined plot
                return sum([mask] + edges + vertices) # in z-order
        </input>
        </sage>

        <sage>
            <input>
            six_plots = [one_K6_graphic((0,0), f) for f in factorizations]
            array = graphics_array(six_plots,3,2)
            array.show(axes=false)
            </input>
        </sage>

        <figure>
            <image source="images/K6-six-factorizations.png"/>
            <caption>Factorizations of \(K_6\)</caption>
        </figure>

        <p>We made two claims above about factors and factorizations:  any single factor is contained in exactly two factorizations, and any two factorizations share a single common factor.  For each factor, we form a list of factorizations containing that factor, and then simply check that the size (length) of that list is \(2\) in each case. Then we examine all pairs of factorizations, determining the size of the set of common factors for each pair.</p>

        <sage>
            <input>map(len, [[fz for fz in factorizations if f in fz] for f in factors])</input>
            <output>[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]</output>
        </sage>

        <sage>
            <input>map(len, [fz1.intersection(fz2) for fz1, fz2 in Subsets(factorizations, 2)])</input>
            <output>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</output>
        </sage>

        <p>As any two factorizations share a single factor, we can make the \(6\) factorizations the vertices of a graph, add every possible edge (a complete graph) and color each edge with the color of the factor shared by the two factorizations at the endpoints.</p>

        <sage>
            <input>
            points = [(1000*cos(i*pi/3.0), 1000*sin(i*pi/3.0)) for i in range(6)]
            nodes = [one_K6_graphic(p, f) for (p,f) in zip(points, factorizations)]
            arcs = []
            for i in range(6):
                for j in range(i+1, 6):
                    common_factor = (factorizations[i].intersection(factorizations[j]))[0]
                    color = factor_colors[common_factor]
                    arcs.append(line([points[i], points[j]], thickness=5, color=color, zorder=1))
            show(sum(arcs + nodes), axes=False) # in z-order
            </input>
        </sage>

        <figure>
            <image source="images/K6-factorization-graph.png"/>
            <caption>Factorization diagram for \(K_6\)</caption>
        </figure>


        <p>We will find it convenient later to have names for the factorizations <mdash /> we will use uppercase letters from the end of the alphabet.</p>

        <sage>
            <input>
            factorization_names = dict(zip(factorizations, [chr(i) for i in range(ord('U'), ord('a')+6)]))
            factorization_names  # not tested
            </input>
        </sage>
    </section>


    <section>
        <title>A Faithful Action on Factorizations</title>

        <p>Automorphisms of a graph are permutations of the vertex set, which when applied to pairs of vertices, take edges to edges, and take non-edges to non-edges.  Because every possible edge is present in \(K_6\), <em>every</em> permutation of the vertices is an automorphism.</p>

        <sage>
            <input>
            aut = SymmetricGroup(vertices)
            aut
            </input>
            <output>Symmetric group of order 6! as a permutation group</output>
        </sage>

        <p>In this section we will show that the group of automorphisms of \(K_6\), as a group action on the set of factorizations, is a faithful group action.  This means that no nontrivial element of the group fixes all of the factorizations, or equivalently, the mapping from an automorphism to a permutation of the factorizations is injective.  First, we define a group action on the edges of \(K_6\), use it to define a group action on factors of \(K_6\), and then define a group action on factorizations of \(K_6\).</p>

        <sage>
            <input>
            def permute_edge(sigma, e):
                '''Action of a vertex permutation on an edge.'''
                return Set([sigma(v) for v in e])

            def permute_factor(sigma, f):
                '''Action of a vertex permutation on a factor.'''
                return Set([permute_edge(sigma, e) for e in f])

            def permute_factorization(sigma, fz):
                '''Action of a vertex permutation on a factorization.'''
                return Set([permute_factor(sigma, f) for f in fz])
            </input>
        </sage>

        <p>We give an illustration of this action with a 6-cycle from the automorphism group acting on the third factorization, with the result of the action being the fourth factorization.  We accumulate the various items as strings in a list, then join them together to print in a readable way.</p>

        <sage>
            <input>
            cycle = aut("(0,1,2,3,4,5)")
            display = [str(cycle), "\n-----\n"]
            fz = factorizations[2]
            display += [str(fz), "\n-----\n"]
            result = permute_factorization(cycle, fz)
            display += [str(result), "\n-----\n"]
            result_match = (result == factorizations[3])
            display += [str(result_match)]
            print ''.join(display)
            </input>
            <output>
            (0,1,2,3,4,5)
            -----
            {{{1, 4}, {0, 3}, {2, 5}}, {{2, 4}, {3, 5}, {0, 1}}, 
            {{1, 3}, {0, 2}, {4, 5}}, {{0, 4}, {2, 3}, {1, 5}}, 
            {{1, 2}, {0, 5}, {3, 4}}}
            -----
            {{{1, 4}, {2, 5}, {0, 3}}, {{1, 2}, {0, 4}, {3, 5}}, 
            {{3, 4}, {1, 5}, {0, 2}}, {{2, 4}, {1, 3}, {0, 5}}, 
            {{0, 1}, {2, 3}, {4, 5}}}
            -----
            True
            </output>
        </sage>

        <p>We can apply an automorphism to each factorization, creating a permutation of the factorizations.  Employing the full permutation group of the factorizations, we check that the action only creates the identity permutation of the factorizations in the case of the identity automorphism.  In other words, the mapping from the automorphism group of the graph to the permutation group of the factorizations is injective, which we describe by saying the action is faithful, or by saying the automorphism group acts <q>faithfully</q> on the factorizations.</p>

        <p>We apply each of the \(6!=720\) automorphisms to each factorization, creating an ordered list of images which we use to define the resulting element of the permutation group of the factorizations.  This permutation is checked to see if it is the identity permutation, and if so it is saved in the list.  We expect to see only the identity automorphism.  This command may take a little while to run, but it is instructive.  There are more sensible ways to check computationally if the action is faithful (such as the result of the action for a set of generators of the group).</p>

        <sage>
            <input>
            SFZ = SymmetricGroup(factorizations)
            identity = SFZ("()")
            [sigma for sigma in aut if SFZ([permute_factorization(sigma, fz) for fz in factorizations]) == identity]
            </input>
            <output>[()]</output>
        </sage>
    </section>


    <section>
    <title>Duality</title>

        <p>Shortly after we built the six factorizations of \(K_6\), we created a graphic which was another version of \(K_6\) with factorizations as vertices and factors labeling (coloring) edges.  This was possible, since as we also demonstrated above, every pair of factorizations have a single factor in common, and each factor is contained in exactly two factorizations.  This version of \(K_6\) is <q>dual</q> to the original \(K_6\), as we will describe in this section.</p>

        <p>Build a graph, \(Q\), whose vertices are the factorizations of \(K_6\), with two vertices adjacent if the factorizations have a factor in common.  The code below is a bit overblown, as we expect this graph to be isomorphic to \(K_6\).  To emphasize the situation, we will label the vertices of \(Q\) (factorizations) by using their names, the uppercase letters from the end of the alphabet.</p>


        <sage>
            <input>
            Q = Graph([(f1, f2) for f1, f2 in Subsets(factorizations, 2) if f1.intersection(f2).cardinality() == 1])
            Q.relabel(factorization_names)
            Q.is_isomorphic(graphs.CompleteGraph(6))
            </input>
        <output>True</output>
        </sage>

        <sage>
            <input>Q.plot(layout='circular')</input>
        </sage>

        <p>By construction, the factorizations of \(K_6\) are the vertices of \(Q\).  The factors of \(K_6\), by the discussion above, are in a bijective correspondence with the edges of \(Q\) (pairs of factorizations).  We illustrate these ideas with functions that accept the factorizations and factors of \(K_6\) (respectively) and return the vertices and edges of \(Q\).  To emphasize the nature of the situation, the trivial function that takes factorizations to vertices will return the factorization names provided by the Python dictionary <c>factorization_names</c>.  We test these functions exhaustively.  Also, notice how the second function employs the first.</p>

        <sage>
            <input>
            def factorization2vertex(afactorization):
                '''Returns a vertex of the dual graph determined by a factorization of the original graph'''
                return factorization_names[afactorization]
            </input>
        </sage>

        <sage>
            <input>[factorization2vertex(fz) for fz in factorizations]</input>
            <output>['U', 'V', 'W', 'X', 'Y', 'Z']</output>
        </sage>

        <sage>
            <input>
            def factor2edge(afactor):
                '''Returns an edge of the dual graph determined by a factor of the original graph'''
                endpoints = [fz for fz in factorizations if afactor in fz]
                return Set([factorization2vertex(avertex) for avertex in endpoints])
            </input>
        </sage>

        <sage>
            <input>[factor2edge(f) for f in factors]</input>
            <output>
            [{'X', 'U'},
             {'Y', 'W'},
             {'Z', 'V'},
             {'Z', 'W'},
             {'U', 'V'},
             {'Y', 'X'},
             {'Y', 'V'},
             {'X', 'W'},
             {'Z', 'U'},
             {'X', 'Z'},
             {'Y', 'U'},
             {'W', 'V'},
             {'U', 'W'},
             {'X', 'V'},
             {'Y', 'Z'}]
            </output>
        </sage>

        <p>Now we describe a natural bijection between edges of \(K_6\) and factors of \(Q\).  Given an edge of \(K_6\), there remain four vertices not incident to this edge.  The subgraph induced by these four vertices (a complete graph on 4 vertices) contains three pairs of disjoint edges, which may be combined with the first edge to form the three edges of a factor of \(K_6\).  Each of these three factors of \(K_6\) is then associated with an edge of \(Q\).  Since these three factors are not pairwise disjoint, no two of the factors can be in the same factorization.  So the three factors determine three pairs of factorizations, and these six factorizations are different.  Thus, these three pairs of factorizations form a factor in the graph \(Q\).  So we begin with an edge of \(K_6\) and determine a factor of the dual, \(Q\).</p>

        <p>Here is the function, and the test.</p>

        <sage>
            <input>
            def edge2factor(anedge):
                '''Returns a factor of the dual graph determined by an edge of the original graph'''
                completions = [f for f in factors if anedge in f]
                return [factor2edge(f) for f in completions]
            </input>
        </sage>

        <sage>
            <input>[edge2factor(e) for e in edges]</input>
            <output>
            [[{'X', 'U'}, {'Y', 'W'}, {'Z', 'V'}],
             [{'Z', 'W'}, {'U', 'V'}, {'Y', 'X'}],
             [{'Y', 'V'}, {'X', 'W'}, {'Z', 'U'}],
             [{'X', 'Z'}, {'Y', 'U'}, {'W', 'V'}],
             [{'U', 'W'}, {'X', 'V'}, {'Y', 'Z'}],
             [{'Y', 'V'}, {'X', 'Z'}, {'U', 'W'}],
             [{'Z', 'W'}, {'Y', 'U'}, {'X', 'V'}],
             [{'U', 'V'}, {'X', 'W'}, {'Y', 'Z'}],
             [{'Y', 'X'}, {'Z', 'U'}, {'W', 'V'}],
             [{'X', 'U'}, {'W', 'V'}, {'Y', 'Z'}],
             [{'Y', 'W'}, {'Z', 'U'}, {'X', 'V'}],
             [{'Z', 'V'}, {'X', 'W'}, {'Y', 'U'}],
             [{'Z', 'V'}, {'Y', 'X'}, {'U', 'W'}],
             [{'Y', 'W'}, {'U', 'V'}, {'X', 'Z'}],
             [{'X', 'U'}, {'Z', 'W'}, {'Y', 'V'}]]
            </output>
        </sage>

        <p>Finally, you might now expect a natural bijection between vertices of \(K_6\) and factorizations of \(Q\).  We will not disappoint.  Given a vertex of \(K_6\), there are five edges incident to this vertex.  No factor of \(K_6\) can contain two of these edges, since all the edges have a vertex in common.  Each edge determines a factor of \(Q\) as above.  These five factors of \(Q\) are disjoint, for if not, an edge common to two factors of \(Q\) would be associated with a factor of \(K_6\) that contained two of the five original edges of \(K_6\).  So a vertex of \(K_6\) determines five disjoint factors of \(Q\), a factorization of the dual, \(Q\).</p>

        <sage>
            <input>
            def vertex2factorization(avertex):
                '''Returns the factorization of the dual graph determined by a vertex of the original graph'''
                incident = [e for e in edges if avertex in e]
                return [edge2factor(e) for e in incident]
            </input>
        </sage>

        <sage>
            <input>[vertex2factorization(v) for v in vertices]</input>
            <output>
            [[[{'X', 'U'}, {'Y', 'W'}, {'Z', 'V'}], [{'Z', 'W'}, {'U', 'V'}, {'Y', 'X'}], [{'Y', 'V'}, {'X', 'W'}, {'Z', 'U'}],
              [{'X', 'Z'}, {'Y', 'U'}, {'W', 'V'}], [{'U', 'W'}, {'X', 'V'}, {'Y', 'Z'}]],
             [[{'X', 'U'}, {'Y', 'W'}, {'Z', 'V'}], [{'Y', 'V'}, {'X', 'Z'}, {'U', 'W'}], [{'Z', 'W'}, {'Y', 'U'}, {'X', 'V'}],
              [{'U', 'V'}, {'X', 'W'}, {'Y', 'Z'}], [{'Y', 'X'}, {'Z', 'U'}, {'W', 'V'}]],
             [[{'Z', 'W'}, {'U', 'V'}, {'Y', 'X'}], [{'Y', 'V'}, {'X', 'Z'}, {'U', 'W'}], [{'X', 'U'}, {'W', 'V'}, {'Y', 'Z'}],
              [{'Y', 'W'}, {'Z', 'U'}, {'X', 'V'}], [{'Z', 'V'}, {'X', 'W'}, {'Y', 'U'}]],
             [[{'Y', 'V'}, {'X', 'W'}, {'Z', 'U'}], [{'Z', 'W'}, {'Y', 'U'}, {'X', 'V'}], [{'X', 'U'}, {'W', 'V'}, {'Y', 'Z'}],
              [{'Z', 'V'}, {'Y', 'X'}, {'U', 'W'}], [{'Y', 'W'}, {'U', 'V'}, {'X', 'Z'}]],
             [[{'X', 'Z'}, {'Y', 'U'}, {'W', 'V'}], [{'U', 'V'}, {'X', 'W'}, {'Y', 'Z'}], [{'Y', 'W'}, {'Z', 'U'}, {'X', 'V'}],
              [{'Z', 'V'}, {'Y', 'X'}, {'U', 'W'}], [{'X', 'U'}, {'Z', 'W'}, {'Y', 'V'}]],
             [[{'U', 'W'}, {'X', 'V'}, {'Y', 'Z'}], [{'Y', 'X'}, {'Z', 'U'}, {'W', 'V'}], [{'Z', 'V'}, {'X', 'W'}, {'Y', 'U'}],
              [{'Y', 'W'}, {'U', 'V'}, {'X', 'Z'}], [{'X', 'U'}, {'Z', 'W'}, {'Y', 'V'}]]]
            </output>
        </sage>

        <p>So notice that we have computed the factors and factorizations of the dual graph \(Q\) by exploiting properties of vertices, edges, factors and factorizations in \(K_6\).  This is in contrast to computing factors and factorizations of \(Q\) with set partition routines, or maximal cliques in an appropriate graph.  The following table summarizes what we mean by saying that \(Q\) is the dual of \(K_6\).</p>

        <table>
            <tgroup cols="3" align="center">
                <thead>
                    <trow><entry>\(K_6\)</entry><entry>\(Q\)</entry><entry>Function</entry></trow>
                </thead>
                <tbody>
                    <row><entry>Factorization</entry><entry>Vertex</entry><entry><c>factorization2vertex</c></entry></row>
                    <row><entry>Factor</entry><entry>Edge</entry><entry><c>factor2edge</c></entry></row>
                    <row><entry>Edge</entry><entry>Factor</entry><entry><c>edge2factor</c></entry></row>
                    <row><entry>Vertex</entry><entry>Factorization</entry><entry><c>vertex2factorization</c></entry></row>
                </tbody>
            </tgroup>
            <caption>Factor and factorization correspondences</caption>
        </table>


        <p>Cameron and van Lint state the following theorem.</p>

        <theorem>
            <statement>
                <p>Six is the only natural number \(n\) for which there is a construction of \(n\) isomorphic objects on an \(n\)-set \(A\), invariant under all permutations of \(A\), but not naturally in one-to-one correspondence with the points of \(A\).</p>
            </statement>
        </theorem>

        <p>So here \(A\) is the set of six original vertices of \(K_6\), and the <q>\(n\) isomorphic objects</q> are the six factorizations of \(K_6\).  We saw in the section on group actions that each permutation of the vertex set of \(K_6\) creates a permutation of the factorizations.  While there is a one-to-one correspondence between vertices and factorizations, the correspondence is not trivial.  This theorem can be explained several ways, but perhaps the most concise is the category-theoretic statement that
        <blockquote>The category whose objects are \(n\)-element sets and whose morphisms are bijections between them has a non-trivial functor to itself if and only if \(n=6\).</blockquote></p>

        <exercise>
            <statement>
                <p>Begin with the graph \(Q\) having vertices labeled <q>W</q> through <q>Z</q> and construct the vertices, edges, factors and factorizations directly, using the methods employed for \(K_6\) at the start of this chapter.  Use your results, and equality testing of sets in Sage, to verify the exhaustive tests provided here.  (Notice that our <q>tests,</q> as given, rely on visual inspection, while this exercise suggests a much more rigorous approach.)</p>
            </statement>
        </exercise>

        <exercise>
            <statement>
                <p>Create the graph \(Q\) again, along with its vertices, edges, factors and factorizations using the direct methods described in the previous exercise, but now begin with the vertices labeled with the actual factorizations of \(K_6\).  So, for example, an edge of this graph will be a \(2\)-set, whose elements are factorizations of \(K_6\) (each a 5-set of 3-sets of 2-sets).  Write and test the inverses of the four bijections above.  These will accept as input the (complicated) structures of \(Q\) and output the simpler structures of \(K_6\).</p>
            </statement>
        </exercise>

    </section>
</chapter>




